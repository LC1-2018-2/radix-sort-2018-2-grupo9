(radix_sort
 (d_nth_TCC1 0
  (d_nth_TCC1-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (d_nth_TCC2 0
  (d_nth_TCC2-1 nil 3750492720 ("" (termination-tcc) nil nil) nil nil))
 (n_digits_TCC1 0
  (n_digits_TCC1-1 nil 3750492720 ("" (termination-tcc) nil nil) nil
   nil))
 (d_digits_gt 0
  (d_digits_gt-1 nil 3750492720
   ("" (measure-induct+ "n" ("n"))
    (("" (expand "n_digits" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (grind) nil nil)
           ("2" (inst -1 "ndiv(x!1,10)")
            (("2" (split -1)
              (("1" (grind)
                (("1"
                  (name-replace "K"
                   "expt(10, n_digits(ndiv(x!1, 10)) - 1)")
                  (("1" (typepred "ndiv(x!1,10)")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(x!1, 10)") (("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (expt def-decl "real" exponentiation nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (<= const-decl "bool" reals nil) nil
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (n_digits def-decl "posnat" radix_sort nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil) nil
    (> const-decl "bool" reals nil))
   shostak))
 (rem_b_j_rem_div_times_b_TCC1 0
  (rem_b_j_rem_div_times_b_TCC1-1 nil 3750492720
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b_TCC2 0
  (rem_b_j_rem_div_times_b_TCC2-1 nil 3750492720
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b_TCC3 0
  (rem_b_j_rem_div_times_b_TCC3-1 nil 3750492720
   ("" (subtype-tcc) nil nil) nil nil))
 (max_digits_TCC1 0
  (max_digits_TCC1-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil
   nil))
 (max_digits_TCC2 0
  (max_digits_TCC2-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil
   nil))
 (max_digits_TCC3 0
  (max_digits_TCC3-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil
   nil))
 (max_digits_TCC4 0
  (max_digits_TCC4-1 nil 3750492720 ("" (termination-tcc) nil nil) nil
   nil))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3750492720 ("" (termination-tcc) nil nil) nil nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3750492720 ("" (termination-tcc) nil nil) nil nil))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3750492720 ("" (termination-tcc) nil nil) nil
   nil))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3750492720 ("" (termination-tcc) nil nil) nil
   nil))
 (radixsort_TCC1 0
  (radixsort_TCC1-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC2 0
  (radixsort_TCC2-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC3 0
  (radixsort_TCC3-1 nil 3750492720 ("" (termination-tcc) nil nil) nil
   nil))
 (radixsort_TCC4 0
  (radixsort_TCC4-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC5 0
  (radixsort_TCC5-1 nil 3750492720 ("" (subtype-tcc) nil nil) nil nil))
 (merge_permutes 0
  (merge_permutes-1 nil 3750495964
   ("" (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (grind) nil nil) ("2" (grind) nil nil)
             ("3" (grind) nil nil)
             ("4" (inst -1 "x!1" "cdr(x!2)" "d")
              (("4" (expand "permutations")
                (("4" (skeep)
                  (("4" (prop)
                    (("1" (inst -1 "x")
                      (("1" (lemma "occurrences_of_app")
                        (("1" (inst -1 "x!1" "cdr(x!2)" "x")
                          (("1" (reveal -1)
                            (("1" (inst -1 "x!1" "x!2" "x")
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length")
                      (("2" (lift-if)
                        (("2" (prop)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge def-decl "list[nat]" radix_sort nil)
    (append def-decl "list[T]" list_props nil)
    (permutations const-decl "bool" sorting nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (occurrences def-decl "nat" sorting nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (occurrences_of_app formula-decl nil sorting nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (merge_sort_d_sorts 0
  (merge_sort_d_sorts-1 nil 3750849843
   ("" (measure-induct+ "length(l)" "l")
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (flatten) (("1" (grind) nil nil)) nil)
             ("2" (flatten) (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

